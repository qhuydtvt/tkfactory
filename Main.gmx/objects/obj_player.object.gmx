<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-13</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size = 800;
sizeMax = 500;
sizeMin = 350;
sizeIncre = 5;
light_colour = c_ltgray;
state = 0;

light_offY = 0;
light_offX = 0;
light_pos_x = x;
light_pos_y = y;

image_speed = 6 / room_speed;
//torch = instance_create(x + 5, y + 5, obj_torch_item);

face_x = 0;
face_y = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cua xeko
var torch_time_left = obj_state.torch_time_left;
sizeMax = (torch_time_left / 600) * 150 + 450;
sizeMin = (torch_time_left / 600) * 150 + 300;

if (sizeIncre &gt; 0){
    if (size &lt; sizeMax){
        size+=sizeIncre;
    }else{
        sizeIncre = -1*sizeIncre;
    }
}else if (sizeIncre &lt;= 0){
    if (size &gt; sizeMin){
        size+=sizeIncre;
    }else{
        sizeIncre = -1*sizeIncre;
    }
}

light_offX = 0;
light_offY = 0;
light_pos_x = x;
light_pos_y = y;

var farSight = 40;

//light for player
if state != 0 {
    draw_set_blend_mode(bm_normal);
} else {
    draw_set_blend_mode(bm_add);
}


if torch_time_left &gt; 0 {
    if state != 0 {
        light_colour = c_white;
    } else {
        light_colour = c_ltgray;
    }
} else {
    if state != 0 {
        light_colour = c_white;
    } else {
        light_colour = c_red;
    }
}

if state != 0 {
    draw_set_alpha(1);
} else {
    draw_set_alpha(0.5);
}


surface_set_target(light);
draw_ellipse_colour(light_pos_x+light_offX-size/2-view_xview, light_pos_y+light_offY-size/2-view_yview, light_pos_x+light_offX+size/2-view_xview, light_pos_y+light_offY+size/2-view_yview,light_colour,c_black,false);
surface_reset_target();

//lightScale for all other object. must got depth &gt; 80

draw_set_blend_mode(bm_add);
draw_set_alpha(1);
surface_set_target(light_layer_1);
draw_ellipse_colour(light_pos_x+light_offX-(size-farSight)/2-view_xview, light_pos_y+light_offY-(size-farSight)/2-view_yview, light_pos_x+light_offX+(size-farSight)/2-view_xview, light_pos_y+light_offY+(size-farSight)/2-view_yview,light_colour,c_black,false);
surface_reset_target();

//end
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);

surface_reset_target();

// Camera follow
view_xview = x - view_wview / 2;
view_yview = y - view_hview / 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dx = 0;
dy = 0;

if keyboard_check(vk_right) {
    dx += 5;
}
if keyboard_check(vk_left) {
    dx -= 5;
}
if keyboard_check(vk_up) {
    dy -= 5;
}
if keyboard_check(vk_down) {
    dy += 5;
}

if (dx!=0 || dy!=0){
    image_angle = radtodeg(arctan2(-dy,dx));
}

if instance_place(x + dx, y, obj_title) {
    dx = 0;
}

x += dx;

if instance_place(x, y + dy, obj_title) {
    dy = 0;
}

y += dy;

if (dx == 0 &amp;&amp; dy == 0) {
    image_speed = 0;
} else {
    image_speed = 6 / room_speed;
    sprite_index = 0;
}

if state == 0 {
    sprite_index = spr_player;
} else {
    sprite_index = spr_player_camera;
}

if keyboard_check(ord('X')) {
    state = 1;
    alarm[0] = 10;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
