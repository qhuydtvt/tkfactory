<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ground</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shadow variables
shON = true // this variable enables and disables the shadow system.
lightRad = 200
pl =  obj_player


plX = pl.x
plY = pl.y
plXOld = 0
plYOld = 0

// First border Line

direct1Mod = 0
direct2Mod = 0

trace1 = true
trace2 = true
trace3 = true
trace4 = true

extender = 250 // extra shadow space for close lighting

point3X = 0
point3Y = 0
point4X = 0
point4Y = 0

point1X = 0
point1Y = 0
point2X = 0
point2Y = 0


mover1 = 0
mover2 = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw_shadows
plX = pl.x
plY = pl.y


    /*
    if (place_meeting(x,y,obj_ground)) {
    
        shON = true
    }
    else {shON = false}
    */

if (shON = true) {
    if (point_distance(plX,plY,x,y) &lt; lightRad) {inLight = true}
    else {inLight = false}
    
    if (inLight = true) {    
        while (trace1 = true ) {   
            direct1 = point_direction(plX,plY,x,y) + direct1Mod
            point1X = plX + lengthdir_x(lightRad + extender,direct1)
            point1Y = plY + lengthdir_y(lightRad + extender,direct1)
            direct1Mod+=0.1 
            if (!collision_line(plX,plY,point1X,point1Y,id,true,false)) {trace1 = false}  
        }
        while (trace1 = false &amp;&amp; trace3 = true) {
            point3X = plX + lengthdir_x(mover1,direct1-0.1)
            point3Y = plY + lengthdir_y(mover1,direct1-0.1)
            mover1 += 0.1
            if (collision_circle(point3X,point3Y,1.1,id,true,false)) {trace3 = false}
        }
    
        while (trace2 = true ) {   
            direct2 = point_direction(plX,plY,x,y) + direct2Mod
            point2X = plX + lengthdir_x(lightRad + extender,direct2)
            point2Y = plY + lengthdir_y(lightRad + extender,direct2)
            direct2Mod-=0.1 
            if (!collision_line(plX,plY,point2X,point2Y,id,true,false)) {trace2 = false}
        }
        while (trace2 = false &amp;&amp; trace4 = true) {
            point4X = plX + lengthdir_x(mover2,direct2+0.1)
            point4Y = plY + lengthdir_y(mover2,direct2+0.1)
            mover2 += 0.1
            if (collision_circle(point4X,point4Y,1.1,id,true,false)) {trace4 = false}
        }
    }
    
    if (plXOld != plX || plYOld != plY) {
        trace1 = true
        trace2 = true
        trace3 = true
        trace4 = true
        mover1 = 0
        mover2 = 0
        direct1Mod = 0
        direct2Mod = 0
        plXOld = plX 
        plYOld = plY
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (point_distance(plX,plY,x,y) &lt; lightRad) { 

    draw_line(plX,plY,point1X,point1Y)
    draw_line(plX,plY,point2X,point2Y)
    draw_line(point1X,point1Y,point2X,point2Y)
    
    draw_circle(point1X,point1Y,5,0)
    draw_circle(point2X,point2Y,5,0)
    
    draw_circle(point3X,point3Y,5,0)
    draw_circle(point4X,point4Y,5,0)
    
    draw_triangle(point1X,point1Y,point2X,point2Y,point3X,point3Y,0)
    draw_triangle(point2X,point2Y,point3X,point3Y,point4X,point4Y,0) 
}



draw_self()


with(pl){
    draw_circle(x,y,other.lightRad,1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
